; Ultra-Expanded CEL Grammar & Syntax Implementation — FULL FEATURE SET
; Windows x64 NASM — Compile‑structured · Gated blocks · Office‑suite punctuation · Radial‑off‑grid indentation · 3‑Helixical spacing

; -------------------------------------------------------------
; Ultra‑Complete EBNF Grammar (Conceptual)
; -------------------------------------------------------------
; program        = {block};
; block          = gate, '{', {statement, ';'}, '}';
; gate           = '[', identifier, ']';
; statement      = identifier, ':', operation, args;
; operation      = "SET" | "ADD" | "SUB" | "MUL" | "DIV" | "DISPLAY" | "COMPARE" |
;                  "JUMP_IF" | "LOOP" | "AND" | "OR" | "NOT" | "XOR" | "SHIFT_LEFT" | "SHIFT_RIGHT";
; args           = identifier | number | identifier ',' identifier | identifier ',' number |
;                  identifier ',' identifier ',' identifier;
; identifier     = letter, {letter | digit | '_'};
; number         = digit, {digit};
; punctuation    = '{' | '}' | '[' | ']' | ':' | ';' | ',';

; -------------------------------------------------------------
; Ultra‑Expanded CEL Script Example (Intuitive‑Intrinsic Semantics)
; -------------------------------------------------------------
; [Main] {
;     counter          : SET  20;
;     increment        : SET  3;
;     accumulator      : SET  1;
;     mask             : SET  255;
;     shifted_left     : SHIFT_LEFT increment, 2;
;     shifted_right    : SHIFT_RIGHT shifted_left, 1;
;     bitwise_and      : AND shifted_left, mask;
;     bitwise_or       : OR shifted_left, accumulator;
;     bitwise_xor      : XOR shifted_left, mask;
;     bitwise_not      : NOT accumulator;
;     loop_counter     : LOOP counter, increment, accumulator;
;     final_result     : DISPLAY accumulator;
;     and_result       : DISPLAY bitwise_and;
;     or_result        : DISPLAY bitwise_or;
;     xor_result       : DISPLAY bitwise_xor;
;     not_result       : DISPLAY bitwise_not;
;     shl_result       : DISPLAY shifted_left;
;     shr_result       : DISPLAY shifted_right;
; }
;
; [LOOP_Block] {
;     accumulator : MUL increment;
;     counter     : SUB 1;
;     comparison  : COMPARE counter, 0;
;     continue    : JUMP_IF comparison, LOOP_Block;
; }

; -------------------------------------------------------------
; NASM Windows x64 Ultra‑Comprehensive Implementation
; -------------------------------------------------------------

section .data
    fmt_accumulator db "Accumulator: %lld", 10, 0
    fmt_and         db "AND Result: %lld", 10, 0
    fmt_or          db "OR Result: %lld", 10, 0
    fmt_xor         db "XOR Result: %lld", 10, 0
    fmt_not         db "NOT Result: %lld", 10, 0
    fmt_shl         db "SHL Result: %lld", 10, 0
    fmt_shr         db "SHR Result: %lld", 10, 0

section .bss
    counter         resq 1
    increment       resq 1
    accumulator     resq 1
    mask            resq 1
    shifted_left    resq 1
    shifted_right   resq 1
    bitwise_and     resq 1
    bitwise_or      resq 1
    bitwise_xor     resq 1
    bitwise_not     resq 1
    comparison      resq 1

section .text
    extern printf
    global  main

main:
    ; [Main] Gate Entry
    mov     qword [counter],    20              ; counter  : SET 20
    mov     qword [increment],  3               ; increment: SET 3
    mov     qword [accumulator],1               ; accumulator: SET 1
    mov     qword [mask],      255              ; mask     : SET 255

    ; SHIFT_LEFT increment,2  → shifted_left
    mov     rax, [increment]
    shl     rax, 2
    mov     [shifted_left], rax

    ; SHIFT_RIGHT shifted_left,1 → shifted_right
    mov     rax, [shifted_left]
    shr     rax, 1
    mov     [shifted_right], rax

    ; AND shifted_left,mask → bitwise_and
    mov     rax, [shifted_left]
    and     rax, [mask]
    mov     [bitwise_and], rax

    ; OR shifted_left,accumulator → bitwise_or
    mov     rax, [shifted_left]
    or      rax, [accumulator]
    mov     [bitwise_or], rax

    ; XOR shifted_left,mask → bitwise_xor
    mov     rax, [shifted_left]
    xor     rax, [mask]
    mov     [bitwise_xor], rax

    ; NOT accumulator → bitwise_not
    mov     rax, [accumulator]
    not     rax
    mov     [bitwise_not], rax

LOOP_Block:
    ; Multiply accumulator by increment using an efficient register-based approach
    imul    rax, [accumulator], [increment]
    mov     [accumulator], rax

    ; Decrement counter directly
    dec     qword [counter]

    ; Check if counter has reached zero, and exit loop if so
    jnz     LOOP_Block  ; If counter ≠ 0, continue looping

exit_point:
    ; Display results
    mov     rcx, fmt_accumulator
    mov     rdx, [accumulator]
    xor     rax, rax
    call    printf


    ; ---------- Display Results ----------
    ; DISPLAY accumulator
    mov     rcx, fmt_accumulator
    mov     rdx, [accumulator]
    xor     rax, rax
    call    printf

    ; DISPLAY bitwise_and
    mov     rcx, fmt_and
    mov     rdx, [bitwise_and]
    xor     rax, rax
    call    printf

    ; DISPLAY bitwise_or
    mov     rcx, fmt_or
    mov     rdx, [bitwise_or]
    xor     rax, rax
    call    printf

    ; DISPLAY bitwise_xor
    mov     rcx, fmt_xor
    mov     rdx, [bitwise_xor]
    xor     rax, rax
    call    printf

    ; DISPLAY bitwise_not
    mov     rcx, fmt_not
    mov     rdx, [bitwise_not]
    xor     rax, rax
    call    printf

    ; DISPLAY shifted_left
    mov     rcx, fmt_shl
    mov     rdx, [shifted_left]
    xor     rax, rax
    call    printf

    ; DISPLAY shifted_right
    mov     rcx, fmt_shr
    mov     rdx, [shifted_right]
    xor     rax, rax
    call    printf

    xor     rax, rax
    ret

section .data
    fmt_result       db "Final Result: %lld", 10, 0
    fmt_operations   db "Bitwise: AND=%lld OR=%lld XOR=%lld NOT=%lld SHL=%lld SHR=%lld", 10, 0

section .bss
    counter         resq 1
    increment       resq 1
    accumulator     resq 1
    mask            resq 1
    shifted_left    resq 1
    shifted_right   resq 1
    bitwise_and     resq 1
    bitwise_or      resq 1
    bitwise_xor     resq 1
    bitwise_not     resq 1

section .text
    extern printf
    global  main

main:
    ; -------- Initialize Variables --------
    mov rax, 20                  ; SET counter → 20
    mov [counter], rax
    mov rax, 3                   ; SET increment → 3
    mov [increment], rax
    mov rax, 1                   ; SET accumulator → 1
    mov [accumulator], rax
    mov rax, 255                 ; SET mask → 255
    mov [mask], rax

    ; -------- Bitwise Operations --------
    shl rax, 2
    mov [shifted_left], rax       ; SHIFT_LEFT increment, 2 → shifted_left

    shr rax, 1
    mov [shifted_right], rax      ; SHIFT_RIGHT shifted_left, 1 → shifted_right

    and rax, [mask]
    mov [bitwise_and], rax        ; AND shifted_left, mask → bitwise_and

    or rax, [accumulator]
    mov [bitwise_or], rax         ; OR shifted_left, accumulator → bitwise_or

    xor rax, [mask]
    mov [bitwise_xor], rax        ; XOR shifted_left, mask → bitwise_xor

    not rax
    mov [bitwise_not], rax        ; NOT accumulator → bitwise_not

LOOP_Block:
    imul rax, [accumulator], [increment]
    mov [accumulator], rax        ; MUL accumulator, increment

    dec qword [counter]           ; Decrement counter
    jnz LOOP_Block                ; Continue looping if counter ≠ 0

exit_point:
    ; -------- Display Results --------
    mov rcx, fmt_result
    mov rdx, [accumulator]
    xor rax, rax
    call printf

    ; Optimized output grouping
    mov rcx, fmt_operations
    mov rdx, [bitwise_and]
    mov r8,  [bitwise_or]
    mov r9,  [bitwise_xor]
    mov r10, [bitwise_not]
    mov r11, [shifted_left]
    mov r12, [shifted_right]
    xor rax, rax
    call printf

    xor rax, rax
    ret

LOOP_Block:
    imul rax, [accumulator], [increment]   ; Multiply directly in register
    mov  [accumulator], rax                ; Store result
    
    dec  rax                               ; Inline decrement (reduces memory access)
    mov  [counter], rax                    ; Store updated counter
    
    jnz  LOOP_Block                        ; Branch efficiently

main:
    ; -------- Initialize Variables --------
    mov rax, 20                  ; Counter starts at 20
    mov [counter], rax

    mov rax, 3                   ; Increment value
    mov [increment], rax

    mov rax, 1                   ; Accumulator begins at 1
    mov [accumulator], rax

    mov rax, 255                 ; Mask for bitwise operations
    mov [mask], rax

section .text
    global parallel_process
parallel_process:
    movdqa xmm0, [accumulator]    ; Load accumulator in SIMD register
    movdqa xmm1, [increment]      ; Load increment in SIMD register
    pmuludq xmm0, xmm1            ; Parallel multiply
    movdqa [accumulator], xmm0    ; Store back result
    ret

spinlock:
    mov eax, 1                  ; Set lock state
    xchg eax, [lock]            ; Atomic exchange (lock acquire)
    test eax, eax
    jnz spinlock                ; If locked, wait

    ; ---- Critical Section ----
    mov [shared_data], rax       ; Modify shared resource safely

    mov dword [lock], 0          ; Release lock

lock inc qword [counter]       ; Atomic increment

mov rax, 1                     
lock xadd qword [counter], rax  ; Atomic addition

retry:
    mov rax, [shared_data]       ; Load current value
    add rax, 1                   ; Increment safely
    lock cmpxchg [shared_data], rax  ; Atomic compare and swap
    jnz retry                    ; Retry if another thread modified the value

section .bss
    .align 64
    shared_data resq 8  ; Ensures alignment to 64-byte boundary

prefetchnta [shared_data]  ; Non-temporal prefetch (avoids polluting cache)

retry:
    mov rax, [shared_data]       ; Load current value
    add rax, 1                   ; Increment safely
    lock cmpxchg [shared_data], rax  ; Atomic compare and swap
    jnz retry                    ; Retry if another thread modified the value

